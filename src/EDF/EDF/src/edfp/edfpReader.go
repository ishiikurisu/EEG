package edfp

import "os"
import "fmt"
// import "bytes"
// import "encoding/binary"

/* --- AUXILIAR FUNCTIONS --- */
func str2int(str string) int {
    ns := 0
    fmt.Sscanf(str, "%d", &ns)
    return ns
}

func getNumberSignals(header map[string]string) int {
    return str2int(header["numbersignals"])
}

/* --- MAIN FUNCTIONS --- */
/**
 * Reads an EDF file
 * @param input a path to the file
 * @return header a map containing the EDF's header
 * @return records a matrix containing the data records
 */
func ReadFile(input string) (map[string]string, [][]int16) {
    inlet, _ := os.Open(input)
    specsList := GetSpecsList()
    specsLength := GetSpecsLength()

    defer inlet.Close()
    header := ReadHeader(inlet, specsList, specsLength)
    records := readRecords(inlet, header)

    return header, records
}

/**
 * Reads the header of an EDF file
 * @param inlet file pointer to the EDF
 * @param specsList an array of strings containing the header itens in order
 * @param specsLength a map containing how many bytes each field occupy
 * @return header a map containing each field
 */
func ReadHeader(inlet *os.File, specsList []string, specsLength map[string]int) map[string]string {
    header := make(map[string]string)
    index := 0

    for index < len(specsList) {
        spec := specsList[index]

        if spec == "label" {
            break
        } else {
            data := make([]byte, specsLength[spec])
            n, _ := inlet.Read(data)
            header[spec] = string(data[:n])
        }

        index++
    }

    numberSignals := getNumberSignals(header)
    for index = index; index < len(specsList) ; index++ {
        spec := specsList[index]
        data := make([]byte, specsLength[spec] * numberSignals)
        n, _ := inlet.Read(data)
        header[spec] = string(data[:n])
    }

    return header
}

/**
 * Reads the data records from the file
 * @param inlet the source file
 * @param header the map generated by the function readHeader
 * @return a matrix containing the data records
 */
func readRecords(inlet *os.File, header map[string]string) [][]int16 {
    numberSignals := getNumberSignals(header)
    records := make([][]int16, numberSignals)

    for i := 0; i < numberSignals; i++ {
        dataRecords := str2int(header["datarecords"])
        records[i] = make([]short, dataRecords)
        // b := []byte{0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40}
    	// buf := bytes.NewReader(b)
    	// err := binary.Read(buf, binary.LittleEndian, &pi)
    	// if err != nil {
    	// 	fmt.Println("binary.Read failed:", err)
    	// }
    }

    return records
}
